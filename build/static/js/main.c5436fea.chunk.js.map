{"version":3,"sources":["common/variables.ts","routes/index.tsx","serviceWorker.ts","index.tsx","styles/root.ts"],"names":["ROUTE_ROOT","Home","loadable","Root","path","component","Boolean","window","location","hostname","match","ReactDOM","render","theme","whiteColor","blackColor","blueColor","redColor","grayDarkColor","grayLightColor","spacing","spacingSmall","avatarSize","fontLarge","fontRegular","fontMedium","fontSmall","fontMicro","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAAaA,EACH,I,OCIJC,EAAOC,aAAS,kBAAM,sDAYbC,EAVQ,WACnB,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,KAAMJ,EAAiBK,UAAWJ,S,QCCrCK,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVRC,IAASC,OACP,cAAC,IAAD,CAAeC,MCTG,CAClBC,WAAY,OACZC,WAAY,UACZC,UAAW,UACXC,SAAU,UACVC,cAAe,UACfC,eAAgB,UAEhBC,QAAS,OACTC,aAAc,MACdC,WAAY,OAEZC,UAAW,OACXC,YAAa,OACbC,WAAY,OACZC,UAAW,OACXC,UAAW,QDPX,SACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SD6HlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5436fea.chunk.js","sourcesContent":["export const ROUTE_ROOT = {\n    HOME: '/',\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport loadable from '@loadable/component';\nimport { ROUTE_ROOT } from 'common/variables';\n\nconst Home = loadable(() => import('pages/main'));\n\nconst Root: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path={ROUTE_ROOT.HOME} component={Home} />\n            </Switch>\n        </BrowserRouter>\n    );\n};\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  type Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n  };\n  \n  export function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Routes from \"./routes\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Root } from \"styles/root\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <ThemeProvider theme={Root}>\n    <React.StrictMode>\n      <Routes />\n    </React.StrictMode>\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","export const Root = {\n  whiteColor: \"#fff\",\n  blackColor: \"#140a00\",\n  blueColor: \"#045fd4\",\n  redColor: \"#ff0000\",\n  grayDarkColor: \"#909090\",\n  grayLightColor: \"#e0e0e0\",\n\n  spacing: \"12px\",\n  spacingSmall: \"6px\",\n  avatarSize: \"36px\",\n\n  fontLarge: \"20px\",\n  fontRegular: \"16px\",\n  fontMedium: \"14px\",\n  fontSmall: \"12px\",\n  fontMicro: \"10px\",\n};\n"],"sourceRoot":""}